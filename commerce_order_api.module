<?php

/**
 * @file
 * Contains commerce_order_api.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\RoleInterface;

/**
 * Implements hook_help().
 */
function commerce_order_api_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_order_api module.
    case 'help.page.commerce_order_api':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_install().
 */
function commerce_order_api_install()
{
  // 为已认证用户添加权限
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, [
    'view commerce_order',
    'update commerce_order',
    'view profile',
    'create customer profile',
    'update own customer profile',
    'delete own customer profile',
    'view own customer profile',
    'restful post commerce_order_api_apply_order_transition'
  ]);
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function commerce_order_api_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions)
{
  if ($entity_type->id() == 'profile' && $bundle == 'customer') {
    $fields = [];
    $fields['phone'] = \Drupal\entity\BundleFieldDefinition::create('string')
      ->setLabel(t('联系电话'))
      ->setDefaultValue('')
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'type' => 'string'
      ])
      ->setDisplayOptions('form', [
        'type' => 'string_textfield'
      ])
      ->setDisplayConfigurable('view', true)
      ->setDisplayConfigurable('form', true);

    return $fields;
  }
}

/**
 * Implements hook_entity_field_storage_info().
 */
function commerce_order_api_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'profile') {
    $definitions['phone'] = \Drupal\entity\BundleFieldDefinition::create('string')
      ->setName('phone')
      ->setLabel(t('联系电话'))
      ->setTargetEntityTypeId($entity_type->id());
    return $definitions;
  }
}


/**
 * Implements hook_cron
 *
 * 10天后，订单自动确认收货
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function commerce_order_api_cron() {
  \Drupal::logger('commerce_order_api')->notice('检查需要自动确认收货的订单');

  // TODO:: Make config from UI
  $config_data = [
    'default' => 10
  ];

  $rs = [];

  foreach ($config_data as $order_type=>$days) {
    $time = new DateTime('now', new DateTimeZone(\Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::STORAGE_TIMEZONE));
    $time->sub(new DateInterval('P'.$days.'D'));

    $commerce_order_query = \Drupal::entityQuery('commerce_order');

    $commerce_order_query
      ->condition('state', 'fulfillment')
      ->condition('created', $time->getTimestamp(), '<')
      ->condition('type', $order_type);

    $rs = array_merge($rs, $commerce_order_query->execute());
  }

  \Drupal::logger('simple_stock')->notice(count($rs). '个订单超时未确认收货：' . var_export($rs, true));

  if (count($rs)) {
    foreach ($rs as $order_id) {
      $commerce_order = \Drupal\commerce_order\Entity\Order::load($order_id);
      if (isset($commerce_order->getState()->getTransitions()['fulfill'])){
        $commerce_order->getState()->applyTransition($commerce_order->getState()->getTransitions()['fulfill']);
        $commerce_order->save();
        \Drupal::getContainer()->get('event_dispatcher')->dispatch(\Drupal\commerce_order_api\Event\OrderAutoCompleteEvent::ORDER_AUTO_COMPLETE, new \Drupal\commerce_order_api\Event\OrderAutoCompleteEvent($commerce_order));
        \Drupal::logger('simple_stock')->notice('对超时订单'.$commerce_order->id() . '成功执行了确认收货操作');
      }
    }
  }
}